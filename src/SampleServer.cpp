//
// SampleServer.cpp
//
// $Id: //poco/1.4/Util/samples/SampleServer/src/SampleServer.cpp#1 $
//
// This sample demonstrates the ServerApplication class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/Util/ServerApplication.h"
#include "Poco/Util/Option.h"
#include "Poco/Util/OptionSet.h"
#include "Poco/Util/HelpFormatter.h"
#include "Poco/Task.h"
#include "Poco/TaskManager.h"
#include "Poco/DateTimeFormatter.h"
#include "Poco/Net/HTMLForm.h"
#include "Poco/Net/HTTPClientSession.h"
#include "Poco/Net/HTTPRequest.h"
#include "Poco/Net/HTTPResponse.h"
#include <Poco/Net/HTTPCredentials.h>
#include <Poco/Net/NameValueCollection.h>
#include <Poco/NullStream.h>
#include "Poco/StreamCopier.h"
#include "Poco/NullStream.h"
#include "Poco/Path.h"
#include "Poco/URI.h"
#include "Poco/Exception.h"

#include <iostream>


using Poco::Util::Application;
using Poco::Util::ServerApplication;
using Poco::Util::Option;
using Poco::Util::OptionSet;
using Poco::Util::OptionCallback;
using Poco::Util::HelpFormatter;
using Poco::Task;
using Poco::TaskManager;
using Poco::DateTimeFormatter;
using Poco::Net::HTTPClientSession;
using Poco::Net::HTTPRequest;
using Poco::Net::HTTPResponse;
using Poco::Net::HTTPMessage;
using Poco::Net::NameValueCollection;
using Poco::StreamCopier;
using Poco::Path;
using Poco::URI;
using Poco::Exception;

class SampleTask: public Task
{
public:
	SampleTask(): Task("SampleTask")
	{
	}
	
	void runTask()
	{
		Application& app = Application::instance();
		while (!sleep(5000))
		{
			Application::instance().logger().information("busy doing nothing... " + DateTimeFormatter::format(app.uptime()));
		}
	}
};


class SampleServer: public ServerApplication
{
public:
	SampleServer(): _helpRequested(false)
	{
	}
	
	~SampleServer()
	{
	}

protected:
	void initialize(Application& self)
	{
		loadConfiguration(); // load default configuration files, if present
		ServerApplication::initialize(self);
		logger().information("starting up");
	}
		
	void uninitialize()
	{
		logger().information("shutting down");
		ServerApplication::uninitialize();
	}

	void defineOptions(OptionSet& options)
	{
		ServerApplication::defineOptions(options);
		
		options.addOption(
			Option("help", "h", "display help information on command line arguments")
				.required(false)
				.repeatable(false)
				.callback(OptionCallback<SampleServer>(this, &SampleServer::handleHelp)));
	}

	void handleHelp(const std::string& name, const std::string& value)
	{
		_helpRequested = true;
		displayHelp();
		stopOptionsProcessing();
	}

	void displayHelp()
	{
		HelpFormatter helpFormatter(options());
		helpFormatter.setCommand(commandName());
		helpFormatter.setUsage("OPTIONS");
		helpFormatter.setHeader("A sample server application that demonstrates some of the features of the Util::ServerApplication class.");
		helpFormatter.format(std::cout);
	}

  std::istream& makeHttpRequest(Poco::Net::HTTPClientSession& session, Poco::Net::HTTPRequest& request, Poco::Net::HTTPResponse& response, Poco::Net::HTMLForm *postParams = NULL)
  {
    std::ostream& requestStream = session.sendRequest(request);
    if (postParams && request.getMethod() != HTTPRequest::HTTP_GET)
      postParams->write(requestStream);

    std::istream *respStream = &(session.receiveResponse(response));

    if (response.getStatus() == Poco::Net::HTTPResponse::HTTP_UNAUTHORIZED)
    {
      // See note on http://pocoproject.org/docs/Poco.Net.HTTPCredentials.html
      Poco::NullOutputStream nos;
      StreamCopier::copyStream(*respStream, nos);
      std::string username;
      std::string password;
      Poco::Net::HTTPCredentials::extractCredentials(request.getURI(), username, password);
      if (!username.empty())
      {
        Poco::Net::HTTPCredentials credentials(username, password);
        credentials.authenticate(request, response);
        std::ostream& requestStream = session.sendRequest(request);
        if (postParams && request.getMethod() != HTTPRequest::HTTP_GET)
          postParams->write(requestStream);
        respStream = &(session.receiveResponse(response));
      }
    }
    
    if (response.getStatus() != Poco::Net::HTTPResponse::HTTP_OK)
    {
      session.reset();
      throw new Poco::ApplicationException(
        Poco::format("Could not get response from web method '%s' - HTTP code %i", request.getURI(), (int)response.getStatus()));
    }
    return *respStream;
  }

  Poco::Net::NameValueCollection& makeWebMethodCall(const std::string& methodUrl, Poco::Net::NameValueCollection& params, const std::string& httpMethod = HTTPRequest::HTTP_GET)
  {
    URI methodUri(methodUrl);
    std::string path(methodUri.getPathAndQuery());
    if (path.empty())
      path = "/";

    Poco::Net::HTMLForm requestForm;
    for (Poco::Net::NameValueCollection::ConstIterator iter = params.begin(); iter != params.end(); ++iter)
      requestForm.add(iter->first, iter->second);

    HTTPClientSession session(methodUri.getHost(), methodUri.getPort());
    HTTPRequest request(httpMethod, path, HTTPMessage::HTTP_1_1);
    HTTPResponse response;

    std::istream* resultStream;
    requestForm.prepareSubmit(request);
    if (httpMethod == HTTPRequest::HTTP_GET)
      resultStream = &(makeHttpRequest(session, request, response));
    else
      resultStream = &(makeHttpRequest(session, request, response, &requestForm));

    Poco::Net::HTMLForm *responseForm = new Poco::Net::HTMLForm();
    responseForm->read(*resultStream);

    return *responseForm;
  }

	int main(const std::vector<std::string>& args)
	{
		if (!_helpRequested)
		{
			Poco::Net::HTMLForm form;
			form.add("param1", "value1");
			form.add("param2", "value2");
			Poco::Net::NameValueCollection& res = makeWebMethodCall("http://code-online.azurewebsites.net/test.aspx", form);

			for (Poco::Net::NameValueCollection::ConstIterator iter = res.begin(); iter != res.end(); ++iter)
			{
				std::cout << "[ " << iter->first << " : " << iter->second << " ]" << std::endl;
			}
			delete &res;

			Poco::Net::NameValueCollection& res2 = makeWebMethodCall("http://code-online.azurewebsites.net/test.aspx", form, HTTPRequest::HTTP_POST);

			for (Poco::Net::NameValueCollection::ConstIterator iter = res2.begin(); iter != res2.end(); ++iter)
			{
				std::cout << "[ " << iter->first << " : " << iter->second << " ]" << std::endl;
			}
			delete &res2;

			TaskManager tm;
			tm.start(new SampleTask);
			waitForTerminationRequest();
			tm.cancelAll();
			tm.joinAll();
		}
		return Application::EXIT_OK;
	}
	
private:
	bool _helpRequested;
};


POCO_SERVER_MAIN(SampleServer)
